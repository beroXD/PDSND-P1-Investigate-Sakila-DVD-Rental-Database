/*
All four of your final submitted queries should contain a JOIN and AGGREGATION.
At least two of your final submitted queries should contain either a subquery OR a CTE.
At least one of your final submitted queries should contain a Window Function.
At least one column generated by the Window Function should be included in one of your final visualization.
*/

/* Question Set #1 */

/*
Question 1
We want to understand more about the movies that families are watching. The following categories are considered family movies: Animation, Children, Classics, Comedy, Family and Music.
Create a query that lists each movie, the film category it is classified in, and the number of times it has been rented out.
*/




/*Query #1 - query used for first insight
What flim category is rented out most by families?*/

SELECT Film_title,
	   Category,
       COUNT(*) AS Rental_count
FROM
(
  SELECT f.title AS Film_title,
	     c.name AS Category
  FROM film_category fc
  JOIN film f
  ON f.film_id = fc.film_id
  JOIN category c
  ON c.category_id = fc.category_id
  JOIN inventory i
  ON f.film_id = i.film_id
  JOIN rental r
  ON i.inventory_id = r.inventory_id
  WHERE c.name IN ('Animation', 'Children', 'Classics', 'Comedy', 'Family', 'Music')
)sub
GROUP BY 2,1
ORDER By 2,1;



/*
Question 2
Now we need to know how the length of rental duration of these family-friendly movies compares to the duration that all movies are rented for. Can you provide a table with the movie titles and divide them into 4 levels (first_quarter, second_quarter, third_quarter, and final_quarter) based on the quartiles (25%, 50%, 75%) of the rental duration for movies across all categories? Make sure to also indicate the category that these family-friendly movies fall into.
*/




/*Query #2 - query used for second insight
What is the rental duration for the Animation, Children, and Family categories?*/

/*rental duration is in days*/

SELECT f.title AS Film_title,
	   c.name AS Category,
       f.rental_duration,
       NTILE (4) OVER (ORDER BY f.rental_duration) AS Standard_Quartile
FROM film_category fc
JOIN film f
ON f.film_id = fc.film_id
JOIN category c
ON c.category_id = fc.category_id
WHERE c.name IN ('Animation', 'Children', 'Classics', 'Comedy', 'Family', 'Music');



/* Question Set #2 */

/*
Question 1:
We want to find out how the two stores compare in their count of rental orders during every month for all the years we have data for. Write a query that returns the store ID for the store, the year and month and the number of rental orders each store has fulfilled for that month. Your table should include a column for each of the following: year, month, store ID and count of rental orders fulfilled during that month.
*/




/*Query #3 - query used for third insight
Which store had higher rental orders?*/

SELECT Rental_month,
	   Rental_year,
       Store_id,
       COUNT (*) AS Count_rental
FROM
(
  SELECT DATE_PART ('month', r.rental_date) AS Rental_month,
         DATE_PART ('year', r.rental_date) AS Rental_year,
         s.store_id AS Store_id
  FROM staff
  JOIN rental r
  ON staff.staff_id = r.staff_id
  JOIN store s
  ON s.store_id = staff.store_id
)sub
GROUP BY 1,2,3
ORDER BY 4 DESC;




/*
Question 2
We would like to know who were our top 10 paying customers, how many payments they made on a monthly basis during second quarter of 2007. Can you write a query to capture the customer name, month and year of payment, and total payment amount for each month by these top 10 paying customers?
*/




/*Query #4 - query used for forth insight
Who are the top paying customers in the second Q of 2007?*/

SELECT DATE_TRUNC ('month', p.payment_date) AS Pay_mon,
		c.first_name || ' ' || c.last_name AS Full_name,
        COUNT (p.amount) AS Pay_count_per_month,
        SUM (p.amount) AS Pay_amount
FROM customer c
JOIN payment p
ON c.customer_id = p.customer_id
WHERE p.payment_date BETWEEN '2007-04-01' AND '2007-06-30'
GROUP BY 2,1
ORDER BY 4 DESC
limit 10;
